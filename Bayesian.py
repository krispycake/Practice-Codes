# -*- coding: utf-8 -*-
"""EX4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Px3FOaN47BIpeY_VFgHIVMcDF2M0jaaa
"""

# Step 1: Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Step 2: Prepare Data for Single Variable Example
data_single = {
    'Outlook': ['Rainy', 'Sunny', 'Overcast', 'Overcast', 'Sunny', 'Rainy',
                'Sunny', 'Overcast', 'Rainy', 'Sunny', 'Sunny', 'Rainy',
                'Overcast', 'Overcast'],
    'Play': ['Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes',
             'No', 'No', 'Yes', 'No', 'Yes', 'Yes']
}

df_single = pd.DataFrame(data_single)

# Display the dataset
print("Single Variable Data:\n", df_single)

# Step 3: Encode Categorical Variables for Single Variable
df_single['Outlook'] = df_single['Outlook'].astype('category').cat.codes
df_single['Play'] = df_single['Play'].astype('category').cat.codes

# Display the encoded dataset
print("Encoded Single Variable Data:\n", df_single)



# Step 4: Train and Test Split for Single Variable
X_single = df_single[['Outlook']]
y_single = df_single['Play']

X_train_single, X_test_single, y_train_single, y_test_single = train_test_split(X_single, y_single, test_size=0.2, random_state=42)



# Step 5: Train Naive Bayes Model for Single Variable
model_single = GaussianNB()
model_single.fit(X_train_single, y_train_single)

# Step 6: Make Predictions
y_pred_single = model_single.predict(X_test_single)

# Step 7: Evaluate Model Performance
accuracy_single = accuracy_score(y_test_single, y_pred_single)
print(f"Accuracy for Single Variable: {accuracy_single:.2f}")

# Classification report
print("\nClassification Report for Single Variable:\n", classification_report(y_test_single, y_pred_single))



# Step 8: Prepare Data for Two Variable Example
data_two = {
    'Outlook': ['Rainy', 'Sunny', 'Overcast', 'Overcast', 'Sunny', 'Rainy',
                'Sunny', 'Overcast', 'Rainy', 'Sunny', 'Sunny', 'Rainy',
                'Overcast', 'Overcast'],
    'Temperature': ['Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool',
                    'Mild', 'Mild', 'Cool', 'Mild', 'Hot', 'Mild',
                    'Hot', 'Mild'],
    'Play': ['Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes',
             'No', 'No', 'Yes', 'No', 'Yes', 'Yes']
}

df_two = pd.DataFrame(data_two)

# Display the dataset
print("Two Variable Data:\n", df_two)



# Step 9: Encode Categorical Variables for Two Variables
df_two['Outlook'] = df_two['Outlook'].astype('category').cat.codes
df_two['Temperature'] = df_two['Temperature'].astype('category').cat.codes
df_two['Play'] = df_two['Play'].astype('category').cat.codes

# Display the encoded dataset
print("Encoded Two Variable Data:\n", df_two)



# Step 10: Train and Test Split for Two Variables
X_two = df_two[['Outlook', 'Temperature']]
y_two = df_two['Play']

X_train_two, X_test_two, y_train_two, y_test_two = train_test_split(X_two, y_two, test_size=0.2, random_state=42)





# Step 11: Train Naive Bayes Model for Two Variables
model_two = GaussianNB()
model_two.fit(X_train_two, y_train_two)

# Step 12: Make Predictions
y_pred_two = model_two.predict(X_test_two)

# Step 13: Evaluate Model Performance
accuracy_two = accuracy_score(y_test_two, y_pred_two)
print(f"Accuracy for Two Variables: {accuracy_two:.2f}")

# Classification report
print("\nClassification Report for Two Variables:\n", classification_report(y_test_two, y_pred_two))

# Step 14: Visualize Results
plt.figure(figsize=(10, 5))

# Single Variable
plt.subplot(1, 2, 1)
sns.countplot(x='Play', data=df_single, palette='viridis')
plt.title('Play Distribution (Single Variable)')

# Two Variables
plt.subplot(1, 2, 2)
sns.countplot(x='Play', data=df_two, palette='viridis')
plt.title('Play Distribution (Two Variables)')

plt.tight_layout()
plt.show()

