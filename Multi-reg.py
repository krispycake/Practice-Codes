# -*- coding: utf-8 -*-
"""EXP3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15lb56OMx3rEyQ1oqlFMTZQQay677KYbQ
"""

# Step 1: Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 2: Creating a synthetic dataset
np.random.seed(0)
n_samples = 100

# Independent variables
X1 = np.random.rand(n_samples) * 10  # Feature 1
X2 = np.random.rand(n_samples) * 5    # Feature 2

# Dependent variable with some noise
Y = 3 + 2 * X1 + 1.5 * X2 + np.random.randn(n_samples)

# Combine into a DataFrame
data = pd.DataFrame({'X1': X1, 'X2': X2, 'Y': Y})

# Display the first few rows of the dataset
print("Sample Data:\n", data.head())

#Plotting the Features and Target
plt.figure(figsize=(12, 5))

# Scatter plot for Feature 1 vs Target
plt.subplot(1, 2, 1)
plt.scatter(data['X1'], data['Y'], color='blue', alpha=0.6)
plt.title('Feature 1 vs Target')
plt.xlabel('Feature 1 (X1)')
plt.ylabel('Target (Y)')
plt.grid()

# Scatter plot for Feature 2 vs Target
plt.subplot(1, 2, 2)
plt.scatter(data['X2'], data['Y'], color='green', alpha=0.6)
plt.title('Feature 2 vs Target')
plt.xlabel('Feature 2 (X2)')
plt.ylabel('Target (Y)')
plt.grid()

plt.tight_layout()
plt.show()

# Step 3: Split Data
# Define X as independent variables and y as the dependent variable
X = data[['X1', 'X2']]  # Independent variables
y = data['Y']            # Dependent variable

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



# Step 4: Model Training
# Initialize the Linear Regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Compute Coefficients
beta_0 = model.intercept_
beta_1, beta_2 = model.coef_

print(f"Intercept (β0): {beta_0}")
print(f"Coefficients (β1, β2): {beta_1}, {beta_2}")



# Step 5: Predictions
# Use the trained model to make predictions
y_pred = model.predict(X_test)



# Step 6: Evaluate Model
# Compute Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)

# Compute R-squared
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R²): {r2}")

