# -*- coding: utf-8 -*-
"""EX10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19EtDE8I9RAW3qKaaXc6y7wyJTH-rVA14
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

# Step 1: Generate a sample dataset
X, y = make_blobs(n_samples=100, centers=3, random_state=42, cluster_std=1.5)

# Step 2: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Initialize the Support Vector Classifier with a linear kernel
svm_model = SVC(kernel='linear', C=1.0)

# Step 4: Train the model
svm_model.fit(X_train, y_train)

# Step 5: Evaluate the model
accuracy = svm_model.score(X_test, y_test)
print(f"Accuracy of Support Vector Machine: {accuracy * 100:.2f}%")

# Step 6: Visualize the decision boundary
def plot_decision_boundary(model, X, y):
    # Create a grid to plot the decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))

    # Predict class labels for all points in the grid
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    # Plot the decision boundary and the training points
    plt.contourf(xx, yy, Z, alpha=0.8)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', marker='o', s=100)
    plt.title("SVM Decision Boundary with Linear Kernel")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.show()

# Call the function to plot the decision boundary
plot_decision_boundary(svm_model, X, y)