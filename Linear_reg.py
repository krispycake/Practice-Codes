# -*- coding: utf-8 -*-
"""EXP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJYZU3-BNkBj3sYNHr8A-m26f38ZfiF9
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Visualize the data
plt.scatter(X, y)
plt.xlabel("X")
plt.ylabel("y")
plt.title("Synthetic  Data")
plt.show()

model = LinearRegression()
model.fit(X, y)

print(model.coef_)
print(model.intercept_)
#Predicted values of the model
y_pred = model.predict(X)

plt.scatter(X, y, color='green')
plt.plot(X, y_pred, color='blue')
plt.xlabel('input')
plt.ylabel('output')
plt.title('Linear Regression')
plt.show()

MSE = mean_squared_error(y,y_pred)
print(f"Mean Squared error is : {MSE}")

MAE = mean_absolute_error(y, y_pred)
print(f"Mean Absolute Error is : {MAE}")

R2 = r2_score(y, y_pred)
print(f"R2 Score is : {R2}")

#Adjusted R squared
n = len(X) # num of data points
p = X.shape[1] # num of features

adj_r2  = 1-(1-R2)*(n-1)/(n-p-1)
print(f"Adjusted R squared value : {adj_r2}")

#visualisation of the above metrics

errors = y - y_pred
squared_errors = errors**2

plt.hist(squared_errors, bins=10, color='blue', edgecolor='black')
plt.xlabel('Squared Error')
plt.ylabel('Frequency')
plt.title('Squared Error Distribution')
plt.show()

abs_errors = np.abs(errors)
plt.scatter(y_pred, abs_errors, color='blue')
plt.xlabel('Predicted Values')
plt.ylabel('Absolute Error')
plt.title('Absolute Error vs Predicted Values')
plt.show()



mean_x = np.mean(X)
mean_y = np.mean(y)

deltaX, deltaY = X - mean_x, y - mean_y

b1 = np.sum(deltaX*deltaY)/np.sum(deltaX**2)
b0 = mean_y - b1*mean_x

print(b1, b0)



